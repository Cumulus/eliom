
= Reactive Dom

{{{Html5.R}}} allows one to insert time varying values into the DOM tree.
It relies on React's signal {{{'a React.signal}}}. More information about react
can be found on the [[http://erratique.ch/software/react| homepage]].

When dealing with dynamic content, one usally ends up with a lot
of imperative DOM manipulations: replacing, appending, removing DOM
elements, updating attributes, etc. {{{Html5.R}}} hides most
of those imperative DOM operations. Every time a signal
changes, the corresponding DOM tree updates itself.

== Usage on client side

To insert reactive DOM elements, just use module {{{Html5.R}}} instead of
{{{Html5.D}}} or {{{Html5.F}}} for these elements.
{{{Html5.R}}} makes also possible to define reactive attributes.

Use function {{{Html5.R.node : 'a elt React.signal -> 'a elt}}}
to insert a reactive node in a page.

=== Example

<<code language="ocaml"|
{shared{
  open Eliom_lib
  open Eliom_content
  open Html5
  open F
}}

module Testnodes_app =
  Eliom_registration.App (
    struct
      let application_name = "testnodes"
    end)

{client{

open Eliom_content.Html5

let split s =
    let len = String.length s in
    let rec aux acc = function
      | 0 -> acc
      | n -> aux (s.[n - 1] :: acc) (pred n)
    in aux [] len

let value_signal, set_value = React.S.create "initial"
(* value_signal : string React.signal *)

let value_len = React.S.map String.length value_signal
(* value_len : int React.signal *)

let content_signal : Html5_types.div_content_fun elt React.signal =
  React.S.map (fun value ->  let l = split value in
                F.div (
                  List.map (fun c ->
                      F.p [F.pcdata (Printf.sprintf "%c" c) ]
                    ) l
                )
              ) value_signal

let html_value_signal : [ `PCDATA ] R.elt list React.signal
  = React.S.map (fun s -> [pcdata s]) value_signal

let make_color len =
  let d = (len * 10) mod 255 in
  Printf.sprintf "color: rgb(%d,%d,%d)" d d d

let make_client_nodes () =
  [
    R.p html_value_signal;
    D.p ~a:[ R.a_style (React.S.map make_color value_len)]
      [R.pcdata value_signal];
    R.node content_signal
  ]


 }}


let make_input () =
  let inp = D.Raw.input ~a:[a_input_type `Text] () in
  let _ = {unit{ Lwt_js_events.(async (fun () ->
      let inp = To_dom.of_input %inp in
      keyups inp (fun _ _ ->
          let s = Js.to_string (inp##value) in
          set_value s;
          Lwt.return ()))) }}
  in
  inp

let main_service =
  Eliom_service.App.service ~path:[] ~get_params:Eliom_parameter.unit ()

let () =
  Testnodes_app.register
    ~service:main_service
    (fun () () ->
       let inp = make_input () in
       let cldiv = D.div [] in
       ignore {unit{ Manip.appendChilds %cldiv (make_client_nodes ()) }};
       Lwt.return
         (Eliom_tools.F.html
            ~title:"testnodes"
            ~css:[["css"; "testnodes.css"]]
            (body [F.h1 [pcdata "Reactive DOM"];
                   inp;
                   F.h2 [pcdata "Client side reactive nodes:"];
                   cldiv;
                   ])
         ))

>>
